@using SurfBoardApp.Blazor.Client.Service;
@using SurfBoardApp.Blazor.Shared.ViewModels.ApplicationUserViewModels;
@using SurfBoardApp.Blazor.Shared.ViewModels.BoardViewModels;
@inject ApiService apiService

<div class="modal fade @_modalClass" id="board-modal" tabindex="-1" style="display: @_modalDisplay;">
    <div class="modal-dialog modal-xl" role="document" style="z-index: 1055;">
        <div class="modal-content">
            @if (CurrentUser != null && CurrentUser.Roles.Contains(UserRoles.Admin))
            {
                <BoardInput @ref="_boardInput" Model=Model OnClosed="CloseModal" />
            }
            else
            {
                <BoardInfo @ref="_boardInfo" Model=Model OnClosed="CloseModal"/>
            }
        </div>
    </div>
    <div @onclick="CloseModal" class="modal-backdrop fade @_modalClass"></div>
</div>

@code {
    [Parameter]
    public BoardVM? Model { get; set; }

    [CascadingParameter]
    public UserVM CurrentUser { get; set; }

    private string _modalDisplay = "none;";
    private string _modalClass = "";

    private BoardInfo? _boardInfo;
    private BoardInput? _boardInput;

    public async Task OpenModal()
    {
        _modalDisplay = "block;";
        await Task.Delay(100); //Delay allows bootstrap to perform nice fade animation
        _modalClass = "show";
        StateHasChanged();
    }

    public async Task CloseModal()
    {
        _modalClass = "";
        await Task.Delay(250);
        _modalDisplay = "none;";
        StateHasChanged();

        Model = new();
    }
}